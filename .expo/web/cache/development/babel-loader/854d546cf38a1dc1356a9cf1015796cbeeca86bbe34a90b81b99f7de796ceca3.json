{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useDialog as useDialogAria } from '@react-aria/dialog';\nimport { mapDomPropsToRN } from '@react-native-aria/utils';\nvar mapRNPropsToDomProps = function mapRNPropsToDomProps(props) {\n  var newProps = _objectSpread(_objectSpread({}, props), {}, {\n    'aria-label': props.accessibilityLabel\n  });\n  return newProps;\n};\nexport function useDialog(props, ref) {\n  var newProps = mapRNPropsToDomProps(props);\n  var params = useDialogAria(newProps, ref);\n  params.dialogProps = mapDomPropsToRN(params.dialogProps);\n  return params;\n}","map":{"version":3,"names":["useDialog","useDialogAria","mapDomPropsToRN","mapRNPropsToDomProps","props","newProps","_objectSpread","accessibilityLabel","ref","params","dialogProps"],"sources":["C:\\Users\\ryann\\OneDrive\\Área de Trabalho\\pdm\\my-app\\node_modules\\@react-native-aria\\dialog\\lib\\module\\useDialog.web.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type { AriaDialogProps } from '@react-types/dialog';\nimport type { DOMAttributes, FocusableElement } from '@react-types/shared';\nimport type { RefObject } from 'react';\n\nexport interface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: DOMAttributes;\n\n  /** Props for the dialog title element. */\n  titleProps: DOMAttributes;\n}\n\nexport interface DialogProps extends AriaDialogProps {\n  accessibilityLabel?: 'string';\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\n\nimport { useDialog as useDialogAria } from '@react-aria/dialog';\nimport { mapDomPropsToRN } from '@react-native-aria/utils';\n\nconst mapRNPropsToDomProps = (props) => {\n  const newProps = { ...props, 'aria-label': props.accessibilityLabel };\n  return newProps;\n};\n\nexport function useDialog(\n  props: DialogProps,\n  ref: RefObject<FocusableElement>\n): DialogAria {\n  const newProps = mapRNPropsToDomProps(props);\n  const params = useDialogAria(newProps, ref);\n  params.dialogProps = mapDomPropsToRN(params.dialogProps);\n\n  return params;\n}\n"],"mappings":";;;AAiCA,SAASA,SAAS,IAAIC,aAAtB,QAA2C,oBAA3C;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAEA,IAAMC,oBAAoB,GAAI,SAAxBA,oBAAoBA,CAAIC,KAAD,EAAW;EACtC,IAAMC,QAAQ,GAAAC,aAAA,CAAAA,aAAA,KAAQF,KAAL;IAAY,cAAcA,KAAK,CAACG;EAAA,EAAjD;EACA,OAAOF,QAAP;AACD,CAHD;AAKA,OAAO,SAASL,SAATA,CACLI,KADK,EAELI,GAFK,EAGO;EACZ,IAAMH,QAAQ,GAAGF,oBAAoB,CAACC,KAAD,CAArC;EACA,IAAMK,MAAM,GAAGR,aAAa,CAACI,QAAD,EAAWG,GAAX,CAA5B;EACAC,MAAM,CAACC,WAAP,GAAqBR,eAAe,CAACO,MAAM,CAACC,WAAR,CAApC;EAEA,OAAOD,MAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}