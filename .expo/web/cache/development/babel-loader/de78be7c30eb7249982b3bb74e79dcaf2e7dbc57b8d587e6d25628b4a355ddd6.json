{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { getItemCount } from '@react-stately/collections';\nimport { isFocusVisible, useKeyboard } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { mapDomPropsToRN } from '@react-native-aria/utils';\nimport { mergeProps, useSlotId } from '@react-aria/utils';\nimport { useSelectableItem } from '@react-aria/selection';\nexport function useMenuItem(props, state, ref) {\n  var isSelected = props.isSelected,\n    isDisabled = props.isDisabled,\n    key = props.key,\n    onClose = props.onClose,\n    _props$closeOnSelect = props.closeOnSelect,\n    closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect,\n    isVirtualized = props.isVirtualized,\n    onAction = props.onAction;\n  var role = 'menuitem';\n  if (state.selectionManager.selectionMode === 'single') {\n    role = 'menuitemradio';\n  } else if (state.selectionManager.selectionMode === 'multiple') {\n    role = 'menuitemcheckbox';\n  }\n  var labelId = useSlotId();\n  var descriptionId = useSlotId();\n  var keyboardId = useSlotId();\n  var ariaProps = {\n    'aria-disabled': isDisabled,\n    role: role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined\n  };\n  if (state.selectionManager.selectionMode !== 'none') {\n    ariaProps['aria-checked'] = isSelected;\n  }\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n  var onPressStart = function onPressStart(e) {\n    if (e.pointerType === 'keyboard' && onAction) {\n      onAction(key);\n    }\n  };\n  var onPressUp = function onPressUp(e) {\n    if (e.pointerType !== 'keyboard') {\n      if (onAction) {\n        onAction(key);\n      }\n      if (closeOnSelect && onClose) {\n        onClose();\n      }\n    }\n  };\n  var _useSelectableItem = useSelectableItem({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: true\n    }),\n    itemProps = _useSelectableItem.itemProps;\n  var _usePress = usePress(mergeProps({\n      onPressStart: onPressStart,\n      onPressUp: onPressUp,\n      isDisabled: isDisabled\n    }, mapDomPropsToRN(itemProps))),\n    pressProps = _usePress.pressProps;\n  var _useHover = useHover({\n      isDisabled: isDisabled,\n      onHoverStart: function onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }, ref),\n    hoverProps = _useHover.hoverProps;\n  var _useKeyboard = useKeyboard({\n      onKeyDown: function onKeyDown(e) {\n        if (e.repeat) {\n          e.continuePropagation();\n          return;\n        }\n        switch (e.key) {\n          case ' ':\n            if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) {\n              onClose();\n            }\n            break;\n          case 'Enter':\n            if (!isDisabled && closeOnSelect !== false && onClose) {\n              onClose();\n            }\n            break;\n          default:\n            e.continuePropagation();\n            break;\n        }\n      }\n    }),\n    keyboardProps = _useKeyboard.keyboardProps;\n  return {\n    menuItemProps: _objectSpread(_objectSpread(_objectSpread({}, mapDomPropsToRN(ariaProps)), mergeProps(pressProps, hoverProps, keyboardProps)), {}, {\n      accessibilityRole: 'button'\n    }),\n    labelProps: {\n      nativeID: labelId\n    },\n    descriptionProps: {\n      nativeID: descriptionId\n    },\n    keyboardShortcutProps: {\n      nativeID: keyboardId\n    }\n  };\n}","map":{"version":3,"names":["getItemCount","isFocusVisible","useKeyboard","useHover","usePress","mapDomPropsToRN","mergeProps","useSlotId","useSelectableItem","useMenuItem","props","state","ref","isSelected","isDisabled","key","onClose","_props$closeOnSelect","closeOnSelect","isVirtualized","onAction","role","selectionManager","selectionMode","labelId","descriptionId","keyboardId","ariaProps","filter","Boolean","join","undefined","collection","getItem","index","onPressStart","e","pointerType","onPressUp","_useSelectableItem","shouldSelectOnPressUp","itemProps","_usePress","pressProps","_useHover","onHoverStart","setFocused","setFocusedKey","hoverProps","_useKeyboard","onKeyDown","repeat","continuePropagation","keyboardProps","menuItemProps","_objectSpread","accessibilityRole","labelProps","nativeID","descriptionProps","keyboardShortcutProps"],"sources":["C:\\Users\\ryann\\OneDrive\\Área de Trabalho\\pdm\\my-app\\node_modules\\@react-native-aria\\menu\\lib\\module\\useMenuItem.web.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { getItemCount } from '@react-stately/collections';\nimport { Key, RefObject } from 'react';\nimport { isFocusVisible, useKeyboard } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { mapDomPropsToRN } from '@react-native-aria/utils';\nimport { mergeProps, useSlotId } from '@react-aria/utils';\nimport { PressEvent } from '@react-types/shared';\nimport { TreeState } from '@react-stately/tree';\nimport { useSelectableItem } from '@react-aria/selection';\nimport { ViewProps } from 'react-native';\ninterface MenuItemAria {\n  /** Props for the menu item element. */\n  menuItemProps: ViewProps;\n\n  /** Props for the main text element inside the menu item. */\n  labelProps: ViewProps;\n\n  /** Props for the description text element inside the menu item, if any. */\n  descriptionProps: ViewProps;\n\n  /** Props for the keyboard shortcut text element inside the item, if any. */\n  keyboardShortcutProps: ViewProps;\n}\n\ninterface AriaMenuItemProps {\n  /** Whether the menu item is disabled. */\n  'isDisabled'?: boolean;\n\n  /** Whether the menu item is selected. */\n  'isSelected'?: boolean;\n\n  /** A screen reader only label for the menu item. */\n  'aria-label'?: string;\n\n  /** The unique key for the menu item. */\n  'key'?: any;\n\n  /** Handler that is called when the menu should close after selecting an item. */\n  'onClose'?: () => void;\n\n  /**\n   * Whether the menu should close when the menu item is selected.\n   * @default true\n   */\n  'closeOnSelect'?: boolean;\n\n  /** Whether the menu item is contained in a virtual scrolling menu. */\n  'isVirtualized'?: boolean;\n\n  /** Handler that is called when the user activates the item. */\n  'onAction'?: (key: Key) => void;\n}\n\n/**\n * Provides the behavior and accessibility implementation for an item in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the item.\n * @param state - State for the menu, as returned by `useTreeState`.\n */\nexport function useMenuItem<T>(\n  props: AriaMenuItemProps,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n): MenuItemAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    onClose,\n    closeOnSelect = true,\n    isVirtualized,\n    onAction,\n  } = props;\n\n  let role = 'menuitem';\n  if (state.selectionManager.selectionMode === 'single') {\n    role = 'menuitemradio';\n  } else if (state.selectionManager.selectionMode === 'multiple') {\n    role = 'menuitemcheckbox';\n  }\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let keyboardId = useSlotId();\n\n  let ariaProps: any = {\n    'aria-disabled': isDisabled,\n    role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby':\n      [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined,\n  };\n  if (state.selectionManager.selectionMode !== 'none') {\n    ariaProps['aria-checked'] = isSelected;\n  }\n\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let onPressStart = (e: PressEvent) => {\n    if (e.pointerType === 'keyboard' && onAction) {\n      onAction(key);\n    }\n  };\n\n  let onPressUp = (e: PressEvent) => {\n    if (e.pointerType !== 'keyboard') {\n      if (onAction) {\n        onAction(key);\n      }\n\n      if (closeOnSelect && onClose) {\n        onClose();\n      }\n    }\n  };\n\n  let { itemProps } = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp: true,\n  });\n\n  let { pressProps } = usePress(\n    mergeProps(\n      { onPressStart, onPressUp, isDisabled },\n      mapDomPropsToRN(itemProps)\n    )\n  );\n\n  let { hoverProps } = useHover(\n    {\n      isDisabled,\n      onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      },\n    },\n    ref\n  );\n\n  const { keyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      // Ignore repeating events, which may have started on the menu trigger before moving\n      // focus to the menu item. We want to wait for a second complete key press sequence.\n      if (e.repeat) {\n        e.continuePropagation();\n        return;\n      }\n      switch (e.key) {\n        case ' ':\n          if (\n            !isDisabled &&\n            state.selectionManager.selectionMode === 'none' &&\n            closeOnSelect !== false &&\n            onClose\n          ) {\n            onClose();\n          }\n          break;\n        case 'Enter':\n          // The Enter key should always close on select, except if overridden.\n          if (!isDisabled && closeOnSelect !== false && onClose) {\n            onClose();\n          }\n          break;\n        default:\n          e.continuePropagation();\n          break;\n      }\n    },\n  });\n\n  return {\n    menuItemProps: {\n      ...mapDomPropsToRN(ariaProps),\n      ...mergeProps(pressProps, hoverProps, keyboardProps),\n      accessibilityRole: 'button',\n    },\n    labelProps: {\n      nativeID: labelId,\n    },\n    descriptionProps: {\n      nativeID: descriptionId,\n    },\n    keyboardShortcutProps: {\n      nativeID: keyboardId,\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}